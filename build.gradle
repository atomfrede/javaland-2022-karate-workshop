plugins {
	id 'org.springframework.boot' version '2.7.0-M2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.flywaydb.flyway" version "8.5.0"
	id 'nu.studer.jooq' version '7.1.1'
	id "org.openapi.generator" version "5.4.0"
	id "com.github.ben-manes.versions" version "0.42.0"
}

group = 'com.github.atomfrede.javaland'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
		vendor = JvmVendorSpec.ADOPTIUM
	}
}


bootJar {
	mainClass = 'com.github.atomfrede.javaland.beleidigungsduell.BeleidigungsduellApplication'
}

ext {
	set('springCloudVersion', "2021.0.2-SNAPSHOT")
	set('testcontainersVersion', "1.16.2")
	jooqVersion = '3.16.4'
	postgresVersion = '42.3.3'
}

sourceSets.main.java.srcDirs += ['src/jooq/java', 'src/api/src/main/java']

flyway {
	url = 'jdbc:postgresql://localhost:5432/beleidigungsduell'
	user = 'beleidigungsduell'
	locations = ['classpath:db/migration']
	outOfOrder = true
}

jooq {
	version = "$jooqVersion"
	configurations {
		beleidigunsgduellSchema {
			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/beleidigungsduell'
					user = 'beleidigungsduell'
					password = 'beleidigungsduell'
				}
				generator {
					name = 'org.jooq.codegen.JavaGenerator'
					strategy {
						name = 'org.jooq.codegen.DefaultGeneratorStrategy'
					}
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
						excludes = 'flyway_schema_history|persistent_logins'

					}
					generate {
						relations = true
						deprecated = false
						records = true
						immutablePojos = false
						fluentSetters = true
					}
					target {
						packageName = 'com.github.atomfrede.javaland.beleidigungsduell.gen.jooq'
						directory = 'src/jooq/java'
					}
				}
			}
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.2'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'com.opencsv:opencsv:5.6'
	implementation 'io.swagger.core.v3:swagger-annotations:2.1.12'
	implementation "io.netty:netty-resolver-dns-native-macos:4.1.74.Final:osx-aarch_64"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	jooqGenerator "org.postgresql:postgresql:$postgresVersion"
	jooqGenerator "org.jooq:jooq:$jooqVersion"
	jooqGenerator "org.jooq:jooq-meta:$jooqVersion"
	jooqGenerator "org.jooq:jooq-codegen:$jooqVersion"
	jooqGenerator "jakarta.xml.bind:jakarta.xml.bind-api:3.0.1"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'com.intuit.karate:karate-core:1.1.0'
	testImplementation 'com.intuit.karate:karate-junit5:1.1.0'
	testImplementation 'org.testcontainers:junit-jupiter:1.15.3'
	testImplementation 'org.testcontainers:testcontainers:1.15.3'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task validateAdminApi(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
	inputSpec = "$rootDir/src/main/resources/api-specs/server/AdminApi.yml"
	recommend = true
}


task generateAdminApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "spring"
	inputSpec = "$rootDir/src/main/resources/api-specs/server/AdminApi.yml"
	outputDir = "$rootDir/src/api/".toString()
	apiPackage = "com.github.atomfrede.javaland.beleidigungsduell.api.admin"
	invokerPackage = "com.github.atomfrede.javaland.beleidigungsduell.api.admin.invoker"
	modelPackage = "com.github.atomfrede.javaland.beleidigungsduell.api.admin.model"
	configOptions = [
			dateLibrary: "java8",
			interfaceOnly: "true"
	]
}
