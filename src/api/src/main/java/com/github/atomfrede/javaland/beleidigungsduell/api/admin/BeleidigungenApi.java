/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.atomfrede.javaland.beleidigungsduell.api.admin;

import com.github.atomfrede.javaland.beleidigungsduell.api.admin.model.Beleidigung;
import com.github.atomfrede.javaland.beleidigungsduell.api.admin.model.BeleidigungUpdate;
import com.github.atomfrede.javaland.beleidigungsduell.api.admin.model.Beleidigungen;
import com.github.atomfrede.javaland.beleidigungsduell.api.admin.model.CreateBeleidigung;
import com.github.atomfrede.javaland.beleidigungsduell.api.admin.model.Problem;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-09T09:22:11.953756+01:00[Europe/Berlin]")
@Validated
@Tag(name = "beleidigungen", description = "the beleidigungen API")
public interface BeleidigungenApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /beleidigungen : Erstelle einen neue Beleidigungs-Datensatz
     *
     * @param createBeleidigung der neue Beleidigungs-Datensatz (required)
     * @return Der BeleidigungsDatensatz wurde erfolgreich erstellt. (status code 201)
     *         or Die gesendet Anfrage ist ungültig. (status code 400)
     *         or  (status code 403)
     *         or An unexpected error occured. (status code 200)
     */
    @Operation(
        operationId = "createBeleidigung",
        summary = "Erstelle einen neue Beleidigungs-Datensatz",
        tags = { "Beleidigungen" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Der BeleidigungsDatensatz wurde erfolgreich erstellt.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Beleidigung.class))),
            @ApiResponse(responseCode = "400", description = "Die gesendet Anfrage ist ungültig.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class))),
            @ApiResponse(responseCode = "403", description = ""),
            @ApiResponse(responseCode = "200", description = "An unexpected error occured.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/beleidigungen",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Beleidigung> createBeleidigung(
        @Parameter(name = "CreateBeleidigung", description = "der neue Beleidigungs-Datensatz", required = true, schema = @Schema(description = "")) @Valid @RequestBody CreateBeleidigung createBeleidigung
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"antwort_template\" : \"Wie passend. Du kämpfst wie eine %s.\", \"beleidigungs_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"antwort_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : 0.5962133916683182, \"beleidigungs_template\" : \"Du kämpfst wie ein dummer %s!\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /beleidigungen/{beleidigung-id} : Beleidigungs-Datensatz löschen
     *
     * @return Der Beleidigungs-Datensaz wurde erfolgreich gelöscht. (status code 204)
     *         or Der Beleidigung-Datensatz konnte in der Datenbank nicht gefunden werden. (status code 404)
     *         or An unexpected error occured. (status code 200)
     */
    @Operation(
        operationId = "deleteGroup",
        summary = "Beleidigungs-Datensatz löschen",
        tags = { "Beleidigung" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Der Beleidigungs-Datensaz wurde erfolgreich gelöscht."),
            @ApiResponse(responseCode = "404", description = "Der Beleidigung-Datensatz konnte in der Datenbank nicht gefunden werden.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class))),
            @ApiResponse(responseCode = "200", description = "An unexpected error occured.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/beleidigungen/{beleidigung-id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteGroup(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /beleidigungen
     * Get a collection of groups. 
     *
     * @param limit Number of entries per page, also known as page size. (optional, default to 10)
     * @param offset Numeric offset identifying the first page entry. (optional, default to 0)
     * @return Der neue Beleidunges-Datensatz wurde erfolgreich erstellt. (status code 200)
     *         or Die gesendet Anfrage ist ungültig. (status code 400)
     *         or  (status code 403)
     *         or An unexpected error occured. (status code 200)
     */
    @Operation(
        operationId = "listBeleidigungen",
        tags = { "Beleidigungen" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Der neue Beleidunges-Datensatz wurde erfolgreich erstellt.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Beleidigungen.class))),
            @ApiResponse(responseCode = "400", description = "Die gesendet Anfrage ist ungültig.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class))),
            @ApiResponse(responseCode = "403", description = ""),
            @ApiResponse(responseCode = "200", description = "An unexpected error occured.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/beleidigungen",
        produces = { "application/json" }
    )
    default ResponseEntity<Beleidigungen> listBeleidigungen(
        @Min(0) @Max(100) @Parameter(name = "limit", description = "Number of entries per page, also known as page size.", schema = @Schema(description = "", defaultValue = "10")) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Numeric offset identifying the first page entry.", schema = @Schema(description = "", defaultValue = "0")) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_total_count\" : 0, \"items\" : [ { \"antwort_template\" : \"Wie passend. Du kämpfst wie eine %s.\", \"beleidigungs_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"antwort_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : 0.5962133916683182, \"beleidigungs_template\" : \"Du kämpfst wie ein dummer %s!\" }, { \"antwort_template\" : \"Wie passend. Du kämpfst wie eine %s.\", \"beleidigungs_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"antwort_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : 0.5962133916683182, \"beleidigungs_template\" : \"Du kämpfst wie ein dummer %s!\" } ], \"_params\" : { \"offset\" : 1, \"limit\" : 6 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /beleidigungen/{beleidigung-id}
     *
     * @return  (status code 200)
     *         or Der Beleidigung-Datensatz konnte in der Datenbank nicht gefunden werden. (status code 404)
     *         or An unexpected error occured. (status code 200)
     */
    @Operation(
        operationId = "readBeleidigung",
        tags = { "Beleidigung" },
        responses = {
            @ApiResponse(responseCode = "200", description = ""),
            @ApiResponse(responseCode = "404", description = "Der Beleidigung-Datensatz konnte in der Datenbank nicht gefunden werden.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class))),
            @ApiResponse(responseCode = "200", description = "An unexpected error occured.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/beleidigungen/{beleidigung-id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> readBeleidigung(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /beleidigungen/{beleidigung-id} : Existierende Beleidigung aktualisieren
     *
     * @param beleidigungUpdate Beleidigungs-Datensatz der aktualisiert werden soll. (required)
     * @return Der Beleidigungs-Datensatz wurde erfolgreich aktualisiert. (status code 204)
     *         or Die gesendet Anfrage ist ungültig. (status code 400)
     *         or  (status code 404)
     *         or An unexpected error occured. (status code 200)
     */
    @Operation(
        operationId = "updateBeleidigung",
        summary = "Existierende Beleidigung aktualisieren",
        tags = { "Beleidigung" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Der Beleidigungs-Datensatz wurde erfolgreich aktualisiert."),
            @ApiResponse(responseCode = "400", description = "Die gesendet Anfrage ist ungültig.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class))),
            @ApiResponse(responseCode = "404", description = ""),
            @ApiResponse(responseCode = "200", description = "An unexpected error occured.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Problem.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/beleidigungen/{beleidigung-id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateBeleidigung(
        @Parameter(name = "BeleidigungUpdate", description = "Beleidigungs-Datensatz der aktualisiert werden soll.", required = true, schema = @Schema(description = "")) @Valid @RequestBody BeleidigungUpdate beleidigungUpdate
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
