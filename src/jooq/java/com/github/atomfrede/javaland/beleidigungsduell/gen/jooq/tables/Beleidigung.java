/*
 * This file is generated by jOOQ.
 */
package com.github.atomfrede.javaland.beleidigungsduell.gen.jooq.tables;


import com.github.atomfrede.javaland.beleidigungsduell.gen.jooq.Keys;
import com.github.atomfrede.javaland.beleidigungsduell.gen.jooq.Public;
import com.github.atomfrede.javaland.beleidigungsduell.gen.jooq.tables.records.BeleidigungRecord;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Beleidigung extends TableImpl<BeleidigungRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.beleidigung</code>
     */
    public static final Beleidigung BELEIDIGUNG = new Beleidigung();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BeleidigungRecord> getRecordType() {
        return BeleidigungRecord.class;
    }

    /**
     * The column <code>public.beleidigung.id</code>.
     */
    public final TableField<BeleidigungRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.beleidigung.beleidigungs_id</code>.
     */
    public final TableField<BeleidigungRecord, UUID> BELEIDIGUNGS_ID = createField(DSL.name("beleidigungs_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.beleidigung.antwort_id</code>.
     */
    public final TableField<BeleidigungRecord, UUID> ANTWORT_ID = createField(DSL.name("antwort_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.beleidigung.beleidigungs_template</code>.
     */
    public final TableField<BeleidigungRecord, String> BELEIDIGUNGS_TEMPLATE = createField(DSL.name("beleidigungs_template"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.beleidigung.antwort_template</code>.
     */
    public final TableField<BeleidigungRecord, String> ANTWORT_TEMPLATE = createField(DSL.name("antwort_template"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Beleidigung(Name alias, Table<BeleidigungRecord> aliased) {
        this(alias, aliased, null);
    }

    private Beleidigung(Name alias, Table<BeleidigungRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.beleidigung</code> table reference
     */
    public Beleidigung(String alias) {
        this(DSL.name(alias), BELEIDIGUNG);
    }

    /**
     * Create an aliased <code>public.beleidigung</code> table reference
     */
    public Beleidigung(Name alias) {
        this(alias, BELEIDIGUNG);
    }

    /**
     * Create a <code>public.beleidigung</code> table reference
     */
    public Beleidigung() {
        this(DSL.name("beleidigung"), null);
    }

    public <O extends Record> Beleidigung(Table<O> child, ForeignKey<O, BeleidigungRecord> key) {
        super(child, key, BELEIDIGUNG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BeleidigungRecord, Long> getIdentity() {
        return (Identity<BeleidigungRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BeleidigungRecord> getPrimaryKey() {
        return Keys.BELEIDIGUNG_PKEY;
    }

    @Override
    public Beleidigung as(String alias) {
        return new Beleidigung(DSL.name(alias), this);
    }

    @Override
    public Beleidigung as(Name alias) {
        return new Beleidigung(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Beleidigung rename(String name) {
        return new Beleidigung(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beleidigung rename(Name name) {
        return new Beleidigung(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, UUID, UUID, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
